name: Build and Deploy with Multi-stage Docker

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["master"]
    types:
      - closed
  workflow_dispatch:

env:
  NODE_VERSION: "20.11"
  CONTAINER_NAME: "image-uploader"
  CONTAINER_PORT: "23333:3000"
  # BuildKit 활성화
  DOCKER_BUILDKIT: 1
  BUILDX_PLATFORMS: "linux/arm64"

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  docker-build-and-deploy:
    name: Multi-stage Docker Build and Deploy
    runs-on: [self-hosted]
    environment: SERVER_HOST
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 더 빠른 체크아웃을 위해 shallow clone 사용
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # BuildKit 기능 활성화
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
          # ARM64 플랫폼 설정
          platforms: linux/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set lowercase repository name
        id: repo
        run: echo "repository=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          push: false
          platforms: linux/arm64
          tags: my-node-base
          cache-from: |
            type=gha,scope=buildkit-base
          cache-to: type=gha,mode=max,scope=buildkit-base

      - name: Build multi-stage Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.fast
          push: true
          platforms: linux/arm64
          tags: |
            ghcr.io/${{ steps.repo.outputs.repository }}:${{ github.ref_name }}
            ghcr.io/${{ steps.repo.outputs.repository }}:${{ github.ref_name }}-${{ github.sha }}
            ghcr.io/${{ steps.repo.outputs.repository }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          # BuildKit 캐싱 최적화
          cache-from: |
            type=gha,scope=buildkit-${{ github.ref_name }}
            type=gha,scope=buildkit-main
          cache-to: type=gha,mode=max,scope=buildkit-${{ github.ref_name }}
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            NEXT_PUBLIC_SUPABASE_URL=${{ vars.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ vars.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          # 빌드 최적화 옵션 (node_cache 제거)

      - name: Deploy to Orange Pi Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          port: 30022
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: GITHUB_SHA,GITHUB_REF_NAME
          script: |
            set -e

            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            IMAGE="ghcr.io/${{ steps.repo.outputs.repository }}:${{ github.ref_name }}"
            BACKUP_IMAGE="ghcr.io/${{ steps.repo.outputs.repository }}:backup"

            echo "🏷️  Current deployment: $IMAGE"
            echo "📊 Git SHA: $GITHUB_SHA"

            # 현재 실행 중인 컨테이너 백업
            echo "💾 Creating backup of current container..."
            if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
              docker commit $CONTAINER_NAME $BACKUP_IMAGE || true
              echo "✅ Backup created: $BACKUP_IMAGE"
            fi

            # 간단한 헬스체크 함수 (메인 페이지 접근)
            health_check() {
              local container=$1
              local max_attempts=30
              local attempt=1
              
              echo "🏥 Health checking container: $container"
              while [ $attempt -le $max_attempts ]; do
                # 단순히 메인 페이지가 200 응답하는지 확인
                if curl -f -s http://localhost:23333 >/dev/null 2>&1; then
                  echo "✅ Health check passed on attempt $attempt"
                  return 0
                fi
                echo "⏳ Health check attempt $attempt/$max_attempts failed, waiting..."
                sleep 10
                attempt=$((attempt + 1))
              done
              
              echo "❌ Health check failed after $max_attempts attempts"
              return 1
            }

            # 롤백 함수
            rollback() {
              echo "🔄 Rolling back to previous version..."
              docker stop $CONTAINER_NAME || true
              docker rm $CONTAINER_NAME || true
              
              if docker images -q $BACKUP_IMAGE | grep -q .; then
                docker run -d -p ${{ env.CONTAINER_PORT }} --name $CONTAINER_NAME \
                  --restart unless-stopped \
                  --log-driver json-file \
                  --log-opt max-size=10m \
                  --log-opt max-file=3 \
                  $BACKUP_IMAGE
                echo "✅ Rollback completed"
              else
                echo "❌ No backup image found for rollback"
                exit 1
              fi
            }

            echo "🔄 Stopping existing container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "📦 Pulling latest image..."
            if ! docker pull $IMAGE; then
              echo "❌ Failed to pull image"
              rollback
              exit 1
            fi

            echo "🚀 Starting new container..."
            if ! docker run -d -p ${{ env.CONTAINER_PORT }} --name $CONTAINER_NAME \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --memory=1g \
              --cpus=1.5 \
              $IMAGE; then
              echo "❌ Failed to start container"
              rollback
              exit 1
            fi

            # 헬스체크 실행
            if ! health_check $CONTAINER_NAME; then
              echo "❌ Health check failed, rolling back..."
              rollback
              exit 1
            fi

            echo "🧹 Cleaning up old images and containers..."
            # 사용하지 않는 이미지 정리 (백업 이미지 제외)
            docker image prune -f --filter "until=24h"

            # 중지된 컨테이너 정리
            docker container prune -f

            # 사용하지 않는 볼륨 정리
            docker volume prune -f

            # 빌드 캐시 정리 (용량 절약)
            docker builder prune -f --filter "until=48h"

            echo "📊 Deployment Statistics:"
            echo "Container Status: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep $CONTAINER_NAME)"
            echo "Image Size: $(docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.Size}}' | grep ${{ steps.repo.outputs.repository }})"
            echo "Disk Usage: $(df -h / | tail -1 | awk '{print $4" available of "$2}')"
            echo "Memory Usage: $(free -h | grep Mem | awk '{print $3"/"$2}')"

            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is running at: http://$(hostname -I | awk '{print $1}'):23333"

      - name: Post-deployment cleanup and monitoring
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          port: 30022
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 시스템 리소스 모니터링
            echo "📈 System Resources After Deployment:"
            echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
            echo "Memory Usage: $(free | grep Mem | awk '{printf "%.1f%%", $3/$2 * 100.0}')"
            echo "Disk Usage: $(df -h / | awk 'NR==2{printf "%s", $5}')"

            # Docker 리소스 사용량
            echo "🐳 Docker Resources:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"

            # 로그 확인 (마지막 10줄)
            echo "📋 Recent application logs:"
            docker logs --tail 10 ${{ env.CONTAINER_NAME }} || true

  # 실패 시 알림 (선택사항)
  notify-failure:
    name: Notify Deployment Failure
    runs-on: [self-hosted]
    needs: docker-build-and-deploy
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "❌ Deployment failed for commit ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          # 여기에 Slack, Discord 등 알림 로직 추가 가능
