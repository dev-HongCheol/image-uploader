name: Build and Deploy

on:
  pull_request:
    branches: ["master"]
    types:
      - closed
  workflow_dispatch:

env:
  NODE_VERSION: "20.11"
  PNPM_VERSION: "8"
  CONTAINER_NAME: "image-uploader"
  CONTAINER_PORT: "23333:3000"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build Next.js Application
    runs-on: [self-hosted]
    container:
      image: node:20.11-slim

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm build

      - name: Prepare Docker build context
        run: |
          mkdir -p docker-build
          cp Dockerfile docker-build/
          cp -R .next/* docker-build/
          cp .env docker-build/
          cp -R public docker-build/standalone/
          mv docker-build/static docker-build/standalone/.next/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-context
          path: docker-build/
          retention-days: 1

  docker-build:
    name: Build and Push Docker Image
    needs: build
    runs-on: [self-hosted]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-build-context
          path: docker-build/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker-build
          file: docker-build/Dockerfile
          push: true
          tags: ${{ vars.GHCR }}:dev
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

  deploy:
    name: Deploy to Server
    needs: docker-build
    runs-on: [self-hosted]
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: 30022
          key: ${{ secrets.SERVER_KEY }}
          envs: GITHUB_SHA
          script: |
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            IMAGE="${{ vars.GHCR }}:dev"

            echo "ðŸ”„ Stopping existing container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "ðŸ“¦ Pulling latest image..."
            docker pull $IMAGE

            echo "ðŸš€ Starting new container..."
            docker run -d -p ${{ env.CONTAINER_PORT }} --name $CONTAINER_NAME $IMAGE

            echo "ðŸ§¹ Cleaning up unused images..."
            docker image prune -f

            echo "âœ… Deployment completed successfully!"
