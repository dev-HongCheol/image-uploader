name: Build and Deploy

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["master"]
    types:
      - closed
  workflow_dispatch:

env:
  NODE_VERSION: "20.11"
  PNPM_VERSION: "8"
  CONTAINER_NAME: "image-uploader"
  CONTAINER_PORT: "23333:3000"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  docker-build-and-deploy:
    name: Docker Build and Deploy
    runs-on: [self-hosted]
    environment: SERVER_HOST
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ vars.GHCR }}:dev
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ vars.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ vars.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          port: 30022
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: GITHUB_SHA
          script: |
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            IMAGE="${{ vars.GHCR }}:dev"

            echo "ðŸ”„ Stopping existing container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "ðŸ“¦ Pulling latest image..."
            docker pull $IMAGE

            echo "ðŸš€ Starting new container..."
            docker run -d -p ${{ env.CONTAINER_PORT }} --name $CONTAINER_NAME $IMAGE

            echo "ðŸ§¹ Cleaning up unused images..."
            docker image prune -f

            echo "âœ… Deployment completed successfully!"
